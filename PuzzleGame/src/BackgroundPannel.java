
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author umsang-uk
 */
public class BackgroundPannel extends javax.swing.JPanel {

    int[] indexes;
    int size;
    int width, height;
    int row, col;
    int emptyIndex;
    int moved;

    boolean clear;

    void shuffle(int row, int col) {
        try {
            // 타이머

            // 만들어질 퍼즐의 상하 이동시 거리 차이, 클리어 정보 초기화
            moved = row;
            clear = false;
            // 서플
            this.row = row;
            this.col = col;
            width = backgroundImg.getWidth() / col;
            height = backgroundImg.getHeight() / row;
            size = row * col;
            emptyIndex = (int) (Math.random() * size);
            indexes = new int[size];
            for (int i = 0; i < size; i++) {
                indexes[i] = i;
            }
            for (int i = 0; i < size; i++) {
                int randomIndex = (int) (Math.random() * size);
                int tmp = indexes[i];
                indexes[i] = indexes[randomIndex];
                indexes[randomIndex] = tmp;
            }
            this.repaint();
            this.invalidate();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void Play(String fileName) {
        try {
            AudioInputStream ais = AudioSystem.getAudioInputStream(PuzzleGame.class.getResource(fileName));
            Clip clip = AudioSystem.getClip();
            clip.open(ais);
            clip.start();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Creates new form BackgroundPannel
     */
    BufferedImage backgroundImg;
    BufferedImage emtyImg;

    public BackgroundPannel() {
        initComponents();
        try {
            backgroundImg = ImageIO.read(PuzzleGame.class.getResource("sunset.jpeg"));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        try {
            emtyImg = ImageIO.read(PuzzleGame.class.getResource("공백.png"));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
//        super.paintComponent(g); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
        try {
            // g.drawImage(backgroundImg, 0, 0, null);
            for (int i = 0; i < size; i++) {
                if (i != emptyIndex) {
                    g.drawImage(backgroundImg.getSubimage(
                            width * (indexes[i] % col),
                            height * (indexes[i] / row),
                            width, height),
                            width * (i % col), height * (i / row), null);
                } else {
                    g.drawImage(emtyImg, width * (i % col), height * (i / row), null);
                }
            }
        } catch (Exception ex) {
        }
    }

    private boolean updates() {
        for (int i = 0; i < size; i++) {
            if (indexes[i] != i) {
                return false;
            }
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    int clickedIndex = 0;
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        if (clear) {
            return;
        }
        try {
            System.out.println(moved);
            System.out.println("X : " + evt.getX() + ", Y : " + evt.getY());
            clickedIndex = evt.getY() / height * col + evt.getX() / width;
            System.out.println("clickedIndex : " + clickedIndex);
            int move = Math.abs(clickedIndex - emptyIndex);
            if (move == 1 || move == moved) {
                int tmp = indexes[clickedIndex];
                indexes[clickedIndex] = indexes[emptyIndex];
                indexes[emptyIndex] = tmp;
                tmp = clickedIndex;
                clickedIndex = emptyIndex;
                emptyIndex = tmp;
                Play("bomb.wav");
                repaint();
                if (updates()) {
                    clear = true;
                    System.out.println("완료");
                    Play("laser.wav");
                }
            }
        }catch (Exception ex) { System.out.println(ex.getMessage());}
        }
//        // 디버그
//        int tmp = indexes[clickedIndex];
//        indexes[clickedIndex] = indexes[emptyIndex];
//        indexes[emptyIndex] = tmp;
//        tmp = clickedIndex;
//        clickedIndex = emptyIndex;
//        emptyIndex = tmp;
//        Play("bomb.wav");
//        repaint();
//        if (updates()) {
//            clear = true;
//            System.out.println("완료");
//            Play("laser.wav");
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

